from tetrimino_I import *
from tetrimino_J import *
from tetrimino_L import *
from tetrimino_O import *
from tetrimino_S import *
from tetrimino_T import *
from tetrimino_Z import *

from tetrimino import *
from tetris_window import *

def my_assert(a,b):
    if a == b:
        print('passed.')
        return 1
    else:
        print('failed.')
        return 0

def test_task0():
    print('Make sure you finished Task0.')

def test_task1():
    print('Test Task1 started.')
    count = 0

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_L( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(180, 20), (220, 20), (220, 60), (220, 100)] )

    tetris_window = TetrisWindow( 40, 8, 20 )
    tetrimino = Tetrimino_L( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(140, 20), (180, 20), (180, 60), (180, 100)] )

    tetris_window = TetrisWindow( 70, 5, 10 )
    tetrimino = Tetrimino_L( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(105, 35), (175, 35), (175, 105), (175, 175)] )

    tetris_window = TetrisWindow( 70, 10, 8 )
    tetrimino = Tetrimino_L( tetris_window )

    count += my_assert( tetrimino.coordinates, [(315, 35), (385, 35), (385, 105), (385, 175)] )
    print('Test Task1: ' + str(count) + '/' + '4 test cases are passed.')

def test_task2():
    print('Test Task2 started.')
    count = 0

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_O( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(220, 20), (260, 20), (220, 60), (260, 60)] )

    tetris_window = TetrisWindow( 40, 8, 20 )
    tetrimino = Tetrimino_O( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(140, 20), (180, 20), (140, 60), (180, 60)] )

    tetris_window = TetrisWindow( 70, 5, 10 )
    tetrimino = Tetrimino_O( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(175, 35), (245, 35), (175, 105), (245, 105)] )

    tetris_window = TetrisWindow( 70, 10, 8 )
    tetrimino = Tetrimino_O( tetris_window )

    count += my_assert( tetrimino.coordinates, [(315, 35), (385, 35), (315, 105), (385, 105)] )
    print('Test Task2: ' + str(count) + '/' + '4 test cases are passed.')

def test_task3():
    print('Test Task3 started.')
    count = 0

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_S( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(220, 20), (220, 60), (260, 60), (260, 100)] )

    tetris_window = TetrisWindow( 40, 8, 20 )
    tetrimino = Tetrimino_S( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(180, 20), (180, 60), (220, 60), (220, 100)] )

    tetris_window = TetrisWindow( 70, 5, 10 )
    tetrimino = Tetrimino_S( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(175, 35), (175, 105), (245, 105), (245, 175)] )

    tetris_window = TetrisWindow( 70, 10, 8 )
    tetrimino = Tetrimino_S( tetris_window )

    count += my_assert( tetrimino.coordinates, [(385, 35), (385, 105), (455, 105), (455, 175)] )
    print('Test Task3: ' + str(count) + '/' + '4 test cases are passed.')

def test_task4():
    print('Test Task4 started.')
    count = 0

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_T( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(180, 20), (220, 20), (260, 20), (220, 60)] )

    tetris_window = TetrisWindow( 40, 8, 20 )
    tetrimino = Tetrimino_T( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(140, 20), (180, 20), (220, 20), (180, 60)] )

    tetris_window = TetrisWindow( 70, 5, 10 )
    tetrimino = Tetrimino_T( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(105, 35), (175, 35), (245, 35), (175, 105)] )

    tetris_window = TetrisWindow( 70, 10, 8 )
    tetrimino = Tetrimino_T( tetris_window )

    count += my_assert( tetrimino.coordinates, [(315, 35), (385, 35), (455, 35), (385, 105)] )
    print('Test Task4: ' + str(count) + '/' + '4 test cases are passed.')

def test_task5():
    print('Test Task5 started.')
    count = 0

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_Z( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(220, 20), (220, 60), (180, 60), (180, 100)] )

    tetris_window = TetrisWindow( 40, 8, 20 )
    tetrimino = Tetrimino_Z( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(180, 20), (180, 60), (140, 60), (140, 100)] )

    tetris_window = TetrisWindow( 70, 5, 10 )
    tetrimino = Tetrimino_Z( tetris_window )
    
    count += my_assert( tetrimino.coordinates, [(175, 35), (175, 105), (105, 105), (105, 175)] )

    tetris_window = TetrisWindow( 70, 10, 8 )
    tetrimino = Tetrimino_Z( tetris_window )

    count += my_assert( tetrimino.coordinates, [(385, 35), (385, 105), (315, 105), (315, 175)] )
    print('Test Task5: ' + str(count) + '/' + '4 test cases are passed.')

def test_task6():
    print('Test Task6 started.')
    count = 0

    data = [[(180, 140), (220, 140), (220, 180), (220, 220)],
            [(220, 140), (220, 180), (180, 180), (140, 180)],
            [(220, 220), (180, 220), (180, 180), (180, 140)],
            [(180, 180), (180, 140), (220, 140), (260, 140)]]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_L( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates, tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%4, data[(i+1)%4]) )

    data = [[(75, 225), (125, 225), (125, 275), (125, 325)],
            [(125, 225), (125, 275), (75, 275), (25, 275)],
            [(125, 325), (75, 325), (75, 275), (75, 225)],
            [(75, 275), (75, 225), (125, 225), (175, 225)]]

    tetris_window = TetrisWindow( 50, 10, 12 )
    tetrimino = Tetrimino_L( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates,tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%4, data[(i+1)%4]) )

    print('Test Task6: ' + str(count) + '/' + '8 test cases are passed.')

def test_task7():
    print('Test Task7 started.')
    count = 0

    data = [[(180, 100), (180, 140), (220, 140), (220, 180)],
            [(140, 140), (180, 140), (180, 100), (220, 100)]]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_S( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates, tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%2, data[(i+1)%2]) )

    data = [[(75, 275), (75, 325), (125, 325), (125, 375)],
            [(25, 325), (75, 325), (75, 275), (125, 275)]]

    tetris_window = TetrisWindow( 50, 10, 12 )
    tetrimino = Tetrimino_S( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates,tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%2, data[(i+1)%2]) )

    print('Test Task7: ' + str(count) + '/' + '4 test cases are passed.')

def test_task8():
    print('Test Task8 started.')
    count = 0

    data = [[(100, 100), (140, 100), (180, 100), (140, 140)],
            [(140, 60), (140, 100), (140, 140), (100, 100)],
            [(100, 100), (140, 100), (180, 100), (140, 60)],
            [(140, 60), (140, 100), (140, 140), (180, 100)]]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_T( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates, tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%4, data[(i+1)%4]) )

    data = [[(325, 275), (375, 275), (425, 275), (375, 325)],
            [(375, 225), (375, 275), (375, 325), (325, 275)],
            [(325, 275), (375, 275), (425, 275), (375, 225)],
            [(375, 225), (375, 275), (375, 325), (425, 275)]]

    tetris_window = TetrisWindow( 50, 10, 12 )
    tetrimino = Tetrimino_T( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates,tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%4, data[(i+1)%4]) )

    print('Test Task8: ' + str(count) + '/' + '8 test cases are passed.')

def test_task9():
    print('Test Task9 started.')
    count = 0

    data = [[(140, 100), (140, 140), (100, 140), (100, 180)],
            [(100, 100), (140, 100), (140, 140), (180, 140)]]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino_Z( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates, tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%2, data[(i+1)%2]) )

    data = [[(375, 225), (375, 275), (325, 275), (325, 325)],
            [(325, 225), (375, 225), (375, 275), (425, 275)]]

    tetris_window = TetrisWindow( 50, 10, 12 )
    tetrimino = Tetrimino_Z( tetris_window )

    for i in range(len(data)):
        tetrimino.coordinates,tetrimino_state = data[i], i
        tetrimino.rotate()

        count += my_assert( (tetrimino.state, tetrimino.coordinates), 
                ((i+1)%2, data[(i+1)%2]) )

    print('Test Task9: ' + str(count) + '/' + '4 test cases are passed.')

def test_task10():
    print('Test Task10 started.')
    count = 0

    data = [ ([(260, 180), (260, 220), (220, 220), (180, 220)],
              [(260, 220), (260, 260), (220, 260), (180, 260)]),
             ([(140, 300), (180, 300), (220, 300), (260, 300)],
              [(140, 340), (180, 340), (220, 340), (260, 340)]),
             ([(180, 20), (220, 20), (220, 60), (220, 100)],
              [(180, 60), (220, 60), (220, 100), (220, 140)]),
             ([(270, 270), (270, 330), (330, 330), (330, 390)],
              [(270, 330), (270, 390), (330, 390), (330, 450)]),
             ([(510, 390), (510, 450), (510, 510), (510, 570)],
              [(510, 450), (510, 510), (510, 570), (510, 630)]),
             ([(390, 150), (450, 150), (390, 210), (450, 210)],
              [(390, 210), (450, 210), (390, 270), (450, 270)]) ]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino( tetris_window )
        
    for i in range(0,3):
        tetrimino.coordinates = data[i][0] 
        tetrimino.move_down()
        count += my_assert( tetrimino.coordinates, data[i][1] )

    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )

    for i in range(3,6):
        tetrimino.coordinates = data[i][0] 
        tetrimino.move_down()
        count += my_assert( tetrimino.coordinates, data[i][1] )

    print('Test Task10: ' + str(count) + '/' + '6 test cases are passed.')

def test_task11():
    print('Test Task11 started.')
    count = 0

    data = [([(380, 300), (420, 300), (380, 340), (420, 340)],
             [(340, 300), (380, 300), (340, 340), (380, 340)]),
            ([(220, 60), (220, 100), (260, 100), (260, 140)], 
             [(180, 60), (180, 100), (220, 100), (220, 140)]),
            ([(100, 260), (100, 300), (100, 340), (100, 380)],
             [(60, 260), (60, 300), (60, 340), (60, 380)]),
            ([(270, 150), (330, 150), (270, 210), (330, 210)],
             [(210, 150), (270, 150), (210, 210), (270, 210)]),
            ([(210, 150), (270, 150), (270, 210), (270, 270)],
             [(150, 150), (210, 150), (210, 210), (210, 270)]),
            ([(270, 150), (270, 210), (270, 270), (270, 330)], 
             [(210, 150), (210, 210), (210, 270), (210, 330)])]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino( tetris_window )
        
    for i in range(0,3):
        tetrimino.coordinates = data[i][0] 
        tetrimino.move_left()
        count += my_assert( tetrimino.coordinates, data[i][1] )

    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )

    for i in range(3,6):
        tetrimino.coordinates = data[i][0] 
        tetrimino.move_left()
        count += my_assert( tetrimino.coordinates, data[i][1] )

    print('Test Task11: ' + str(count) + '/' + '6 test cases are passed.')

def test_task12():
    print('Test Task12 started.')
    count = 0

    data = [ ([(300, 60), (340, 60), (340, 100), (340, 140)],
              [(340, 60), (380, 60), (380, 100), (380, 140)]),
             ([(180, 100), (220, 100), (220, 140), (220, 180)],
              [(220, 100), (260, 100), (260, 140), (260, 180)]),
             ([(220, 60), (220, 100), (220, 140), (220, 180)],
              [(260, 60), (260, 100), (260, 140), (260, 180)]),
             ([(390, 150), (330, 150), (330, 210), (330, 270)],
              [(450, 150), (390, 150), (390, 210), (390, 270)]),
             ([(330, 90), (330, 150), (330, 210), (330, 270)],
              [(390, 90), (390, 150), (390, 210), (390, 270)]),
             ([(450, 150), (450, 210), (510, 210), (510, 270)],
              [(450, 150), (450, 210), (510, 210), (510, 270)]) ]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino( tetris_window )
        
    for i in range(0,3):
        tetrimino.coordinates = data[i][0] 
        tetrimino.move_right()
        count += my_assert( tetrimino.coordinates, data[i][1] )

    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )

    for i in range(3,6):
        tetrimino.coordinates = data[i][0] 
        tetrimino.move_right()
        count += my_assert( tetrimino.coordinates, data[i][1] )

    print('Test Task12: ' + str(count) + '/' + '6 test cases are passed.')

def test_task13():
    print('Test Task13 started.')
    count = 0

    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )

    data = [ (([(150, 630), (90, 630), (90, 570), (90, 510)], [((270, 870), (255, 0, 255)), ((210, 870), (255, 0, 255)), ((210, 810), (255, 0, 255)), ((210, 750), (255, 0, 255)), ((330, 870), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((450, 870), (0, 255, 0)), ((390, 810), (0, 255, 0)), ((30, 690), (255, 0, 0)), ((30, 750), (255, 0, 0)), ((30, 810), (255, 0, 0)), ((30, 870), (255, 0, 0))]), False),
             (([(150, 30), (210, 30), (270, 30), (210, 90)], [((210, 870), (255, 0, 255)), ((30, 810), (255, 0, 0)), ((30, 870), (255, 0, 0)), ((90, 870), (255, 0, 255)), ((510, 870), (0, 255, 0)), ((330, 870), (255, 255, 0)), ((330, 810), (255, 255, 0)), ((210, 750), (0, 255, 255)), ((210, 810), (0, 255, 255)), ((270, 810), (0, 255, 255)), ((270, 870), (0, 255, 255)), ((150, 750), (255, 0, 0)), ((150, 810), (255, 0, 0)), ((150, 870), (255, 0, 0)), ((510, 750), (255, 165, 0)), ((510, 810), (255, 165, 0)), ((450, 810), (255, 165, 0)), ((450, 870), (255, 165, 0))]), False),
             (([(150, 30), (210, 30), (150, 90), (210, 90)], [((30, 870), (0, 255, 255)), ((210, 870), (0, 255, 0)), ((270, 870), (0, 255, 0)), ((330, 870), (0, 255, 0)), ((390, 810), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((450, 870), (0, 255, 0)), ((90, 870), (255, 255, 0)), ((150, 870), (255, 255, 0)), ((150, 810), (255, 255, 0)), ((150, 750), (255, 255, 0)), ((390, 690), (255, 165, 0)), ((390, 750), (255, 165, 0)), ((330, 750), (255, 165, 0)), ((330, 810), (255, 165, 0))]), False),
             (([(270, 870), (210, 870), (210, 810), (210, 750)], []), True),
             (([(211, 510), (210, 570), (150, 570), (150, 630)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((150, 810), (0, 255, 255)), ((210, 810), (0, 255, 255)), ((450, 810), (255, 0, 0)), ((450, 870), (255, 0, 0)), ((330, 810), (255, 165, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((30, 810), (0, 255, 255)), ((90, 810), (0, 255, 255)), ((90, 750), (0, 255, 255)), ((150, 750), (0, 255, 255)), ((270, 810), (255, 0, 255)), ((270, 750), (255, 0, 255)), ((330, 750), (255, 0, 255)), ((390, 750), (255, 0, 255)), ((450, 750), (255, 255, 0)), ((450, 690), (255, 255, 0)), ((390, 690), (255, 255, 0)), ((330, 690), (255, 255, 0)), ((150, 690), (0, 255, 255)), ((210, 690), (0, 255, 255)), ((210, 750), (0, 255, 255)), ((210, 630), (0, 255, 255)), ((270, 690), (0, 255, 255)), ((30, 690), (0, 255, 0)), ((30, 750), (0, 255, 0)), ((90, 690), (0, 255, 0)), ((270, 630), (255, 165, 0)), ((330, 630), (255, 165, 0)), ((30, 570), (0, 255, 255)), ((30, 630), (0, 255, 255)), ((90, 630), (0, 255, 255)), ((390, 630), (255, 255, 0)), ((390, 570), (255, 255, 0)), ((330, 570), (255, 255, 0)), ((270, 570), (255, 255, 0)), ((450, 630), (0, 0, 255)), ((510, 630), (0, 0, 255))]), True),
             (([(150, 870), (90, 870), (90, 810), (90, 750)], [((270, 870), (255, 0, 255)), ((210, 870), (255, 0, 255)), ((210, 810), (255, 0, 255)), ((210, 750), (255, 0, 255)), ((330, 870), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((450, 870), (0, 255, 0)), ((390, 810), (0, 255, 0)), ((30, 690), (255, 0, 0)), ((30, 750), (255, 0, 0)), ((30, 810), (255, 0, 0)), ((30, 870), (255, 0, 0))]), True),
             (([(510, 510), (510, 570), (450, 570), (450, 630)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 810), (255, 0, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((270, 810), (255, 0, 0)), ((30, 810), (255, 165, 0)), ((330, 750), (255, 255, 0)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((270, 750), (0, 255, 0)), ((210, 750), (0, 255, 0)), ((510, 750), (255, 0, 255)), ((450, 750), (255, 0, 255)), ((390, 750), (255, 0, 255)), ((90, 690), (0, 255, 0)), ((270, 690), (255, 0, 0)), ((330, 690), (255, 0, 0)), ((390, 690), (0, 255, 0)), ((30, 570), (0, 255, 0)), ((30, 630), (0, 255, 0)), ((30, 690), (0, 255, 0)), ((90, 630), (0, 255, 0)), ((510, 630), (0, 255, 0)), ((510, 690), (0, 255, 0)), ((450, 690), (0, 255, 0)), ((210, 630), (255, 0, 0)), ((210, 690), (255, 0, 0)), ((270, 570), (255, 255, 0)), ((270, 630), (255, 255, 0)), ((330, 630), (255, 255, 0)), ((390, 630), (255, 255, 0))]), True) ]

    for i, result in data:
        tetrimino.coordinates, tetris_window.landed_objects = i
        count += my_assert( tetrimino.has_landed(), result )

    print('Test Task13: ' + str(count) + '/' + '7 test cases are passed.')

def test_task14():
    print('Test Task14 started.')
    count = 0
    
    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )

    before_afters = [ (([(390, 30), (390, 90), (330, 90), (330, 150)], [((30, 870), (0, 255, 255)), ((210, 870), (0, 255, 0)), ((270, 870), (0, 255, 0)), ((330, 870), (0, 255, 0)), ((390, 810), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((450, 870), (0, 255, 0)), ((90, 870), (255, 255, 0)), ((150, 870), (255, 255, 0)), ((150, 810), (255, 255, 0)), ((150, 750), (255, 255, 0))]), ([(390, 690), (390, 750), (330, 750), (330, 810)], [((30, 870), (0, 255, 255)), ((210, 870), (0, 255, 0)), ((270, 870), (0, 255, 0)), ((330, 870), (0, 255, 0)), ((390, 810), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((450, 870), (0, 255, 0)), ((90, 870), (255, 255, 0)), ((150, 870), (255, 255, 0)), ((150, 810), (255, 255, 0)), ((150, 750), (255, 255, 0))])),
                      (([(270, 30), (270, 90), (270, 150), (270, 210)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 750), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 690), (255, 0, 0)), ((510, 750), (255, 0, 0)), ((510, 810), (255, 0, 0)), ((450, 750), (255, 165, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((390, 750), (255, 0, 255)), ((330, 750), (255, 0, 255)), ((330, 690), (255, 0, 255)), ((330, 630), (255, 0, 255))]), ([(270, 630), (270, 690), (270, 750), (270, 810)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 750), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 690), (255, 0, 0)), ((510, 750), (255, 0, 0)), ((510, 810), (255, 0, 0)), ((450, 750), (255, 165, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((390, 750), (255, 0, 255)), ((330, 750), (255, 0, 255)), ((330, 690), (255, 0, 255)), ((330, 630), (255, 0, 255))])),
                      (([(390, 30), (450, 30), (510, 30), (450, 90)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 810), (255, 0, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((270, 810), (255, 0, 0)), ((30, 810), (255, 165, 0)), ((510, 690), (0, 255, 0)), ((510, 750), (0, 255, 0)), ((450, 750), (0, 255, 0)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((270, 750), (0, 255, 255)), ((390, 690), (0, 255, 0)), ((390, 750), (0, 255, 0)), ((330, 750), (0, 255, 0)), ((30, 690), (255, 0, 0)), ((90, 690), (255, 0, 0)), ((150, 690), (255, 0, 0)), ((210, 690), (255, 0, 0))]), ([(390, 630), (450, 630), (510, 630), (450, 690)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 810), (255, 0, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((270, 810), (255, 0, 0)), ((30, 810), (255, 165, 0)), ((510, 690), (0, 255, 0)), ((510, 750), (0, 255, 0)), ((450, 750), (0, 255, 0)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((270, 750), (0, 255, 255)), ((390, 690), (0, 255, 0)), ((390, 750), (0, 255, 0)), ((330, 750), (0, 255, 0)), ((30, 690), (255, 0, 0)), ((90, 690), (255, 0, 0)), ((150, 690), (255, 0, 0)), ((210, 690), (255, 0, 0))])),
                      (([(330, 90), (390, 90), (390, 30), (450, 30)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 810), (255, 0, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((270, 810), (255, 0, 0)), ((30, 810), (255, 165, 0)), ((330, 750), (255, 255, 0)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((30, 630), (0, 0, 255)), ((90, 630), (0, 0, 255)), ((30, 690), (0, 0, 255)), ((90, 690), (0, 0, 255)), ((270, 690), (0, 255, 0)), ((270, 750), (0, 255, 0)), ((210, 750), (0, 255, 0)), ((510, 690), (255, 0, 255)), ((510, 750), (255, 0, 255)), ((450, 750), (255, 0, 255)), ((390, 750), (255, 0, 255)), ((30, 510), (0, 0, 255)), ((90, 510), (0, 0, 255)), ((30, 570), (0, 0, 255)), ((90, 570), (0, 0, 255)), ((450, 630), (255, 0, 255)), ((450, 690), (255, 0, 255)), ((390, 690), (255, 0, 255)), ((330, 690), (255, 0, 255)), ((150, 690), (255, 0, 255)), ((150, 630), (255, 0, 255)), ((210, 630), (255, 0, 255)), ((270, 630), (255, 0, 255))]), ([(330, 630), (390, 630), (390, 570), (450, 570)], [((390, 870), (255, 165, 0)), ((510, 870), (255, 0, 0)), ((210, 870), (255, 0, 255)), ((90, 870), (0, 255, 255)), ((150, 870), (0, 255, 255)), ((450, 870), (255, 0, 0)), ((330, 870), (255, 165, 0)), ((270, 870), (255, 165, 0)), ((210, 810), (255, 165, 0)), ((150, 810), (255, 165, 0)), ((90, 810), (255, 165, 0)), ((510, 810), (255, 0, 0)), ((450, 810), (255, 165, 0)), ((390, 810), (255, 165, 0)), ((270, 810), (255, 0, 0)), ((30, 810), (255, 165, 0)), ((330, 750), (255, 255, 0)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((30, 630), (0, 0, 255)), ((90, 630), (0, 0, 255)), ((30, 690), (0, 0, 255)), ((90, 690), (0, 0, 255)), ((270, 690), (0, 255, 0)), ((270, 750), (0, 255, 0)), ((210, 750), (0, 255, 0)), ((510, 690), (255, 0, 255)), ((510, 750), (255, 0, 255)), ((450, 750), (255, 0, 255)), ((390, 750), (255, 0, 255)), ((30, 510), (0, 0, 255)), ((90, 510), (0, 0, 255)), ((30, 570), (0, 0, 255)), ((90, 570), (0, 0, 255)), ((450, 630), (255, 0, 255)), ((450, 690), (255, 0, 255)), ((390, 690), (255, 0, 255)), ((330, 690), (255, 0, 255)), ((150, 690), (255, 0, 255)), ((150, 630), (255, 0, 255)), ((210, 630), (255, 0, 255)), ((270, 630), (255, 0, 255))])) ]

    for before,after in before_afters:
        tetrimino.coordinates,tetris_window.landed_objects = before
        tetrimino.land()

        count += my_assert( (tetrimino.coordinates, tetris_window.landed_objects), after )

    print('Test Task14: ' + str(count) + '/' + '4 test cases are passed.')


def test_task15():
    print('You should test Task15 visually by running the game after you finish all tasks.')

def test_task16():
    print('Test Task16 started.')
    count = 0

    data = [([(510, 30), (510, 90), (570, 90), (570, 150)], False),
            ([(-30, 30), (30, 30), (90, 30), (30, 90)], False),
            ([(570, 30), (570, 90), (570, 150), (570, 210)], False),
            ([(390, -30), (390, 30), (390, 90), (330, 30)], False),
            ([(510, 30), (570, 30), (510, 90), (570, 90)], False),
            ([(510, 750), (510, 810), (510, 870), (450, 810)], True),
            ([(330, 90), (330, 150), (330, 210), (330, 270)], True),
            ([(150, 150), (210, 150), (210, 90), (210, 30)], True) ]

    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )

    for coordinates, result in data:
        count += my_assert( tetris_window.all_inside( coordinates ), result )

    print('Test Task16: ' + str(count) + '/' + '8 test cases are passed.')


def test_task17():
    print('Test Task17 started.')
    count = 0

    data = [(([(220, 300), (260, 300), (300, 300), (260, 260)], [((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255))]), False),
            (([(100, 380), (60, 380), (60, 340), (60, 300)], [((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255)), ((220, 740), (255, 0, 255)), ((180, 740), (255, 0, 255)), ((180, 700), (255, 0, 255)), ((180, 660), (255, 0, 255)), ((180, 500), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((180, 580), (255, 0, 0)), ((180, 620), (255, 0, 0)), ((100, 660), (255, 165, 0)), ((100, 700), (255, 165, 0)), ((60, 700), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((140, 460), (255, 0, 0)), ((180, 460), (255, 0, 0)), ((220, 460), (255, 0, 0)), ((260, 460), (255, 0, 0))]), False),
            (([(140, 60), (180, 60), (140, 100), (180, 100)], [((300, 780), (0, 255, 255)), ((340, 780), (0, 255, 255)), ((220, 780), (0, 0, 255)), ((260, 780), (0, 0, 255)), ((140, 780), (255, 0, 0)), ((420, 780), (255, 0, 0)), ((180, 780), (255, 0, 255)), ((60, 780), (0, 255, 255)), ((100, 780), (0, 255, 255)), ((180, 740), (0, 255, 0)), ((220, 740), (0, 255, 0)), ((260, 740), (0, 255, 0)), ((20, 780), (255, 0, 0)), ((380, 700), (255, 165, 0)), ((380, 740), (255, 165, 0)), ((340, 740), (255, 165, 0)), ((20, 700), (0, 0, 255)), ((60, 700), (0, 0, 255)), ((20, 740), (0, 0, 255)), ((60, 740), (0, 0, 255)), ((340, 700), (255, 165, 0)), ((300, 700), (255, 165, 0)), ((300, 740), (255, 165, 0)), ((180, 700), (255, 165, 0)), ((140, 700), (255, 165, 0)), ((140, 740), (255, 165, 0)), ((300, 660), (255, 165, 0)), ((260, 700), (255, 165, 0)), ((100, 700), (255, 255, 0)), ((100, 740), (255, 255, 0)), ((260, 620), (255, 165, 0)), ((260, 660), (255, 165, 0)), ((220, 660), (255, 165, 0)), ((140, 620), (0, 0, 255)), ((180, 620), (0, 0, 255)), ((140, 660), (0, 0, 255)), ((180, 660), (0, 0, 255)), ((60, 660), (255, 255, 0)), ((60, 620), (255, 255, 0)), ((380, 660), (0, 0, 255)), ((420, 660), (0, 0, 255)), ((140, 540), (0, 0, 255)), ((180, 540), (0, 0, 255)), ((140, 580), (0, 0, 255)), ((180, 580), (0, 0, 255)), ((60, 580), (255, 255, 0)), ((20, 580), (255, 255, 0)), ((20, 620), (255, 255, 0)), ((20, 660), (255, 255, 0)), ((20, 500), (0, 0, 255)), ((60, 500), (0, 0, 255)), ((20, 540), (0, 0, 255)), ((60, 540), (0, 0, 255)), ((380, 580), (0, 0, 255)), ((420, 580), (0, 0, 255)), ((380, 620), (0, 0, 255)), ((420, 620), (0, 0, 255)), ((260, 580), (255, 165, 0)), ((300, 580), (255, 165, 0)), ((300, 620), (255, 165, 0)), ((340, 620), (255, 165, 0)), ((300, 500), (0, 255, 255)), ((300, 540), (0, 255, 255)), ((340, 540), (0, 255, 255)), ((340, 580), (0, 255, 255)), ((420, 540), (255, 0, 255)), ((380, 540), (255, 0, 255)), ((380, 500), (255, 0, 255)), ((380, 460), (255, 0, 255)), ((300, 420), (0, 255, 255)), ((300, 460), (0, 255, 255)), ((340, 460), (0, 255, 255)), ((340, 500), (0, 255, 255)), ((180, 500), (255, 0, 255)), ((140, 500), (255, 0, 255)), ((140, 460), (255, 0, 255)), ((140, 420), (255, 0, 255)), ((260, 500), (255, 165, 0)), ((260, 540), (255, 165, 0)), ((220, 540), (255, 165, 0)), ((220, 580), (255, 165, 0)), ((260, 420), (255, 165, 0)), ((260, 460), (255, 165, 0)), ((220, 460), (255, 165, 0)), ((220, 500), (255, 165, 0)), ((180, 420), (0, 255, 255)), ((220, 420), (0, 255, 255)), ((220, 380), (0, 255, 255)), ((260, 380), (0, 255, 255)), ((420, 380), (255, 0, 0)), ((420, 420), (255, 0, 0)), ((420, 460), (255, 0, 0)), ((420, 500), (255, 0, 0))]), False),
            (([(220, 780), (180, 780), (180, 740), (180, 700)], [((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255))]), True),
            (([(260, 620), (260, 580), (220, 580), (180, 580)], [((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255)), ((220, 740), (255, 0, 255)), ((180, 740), (255, 0, 255)), ((180, 700), (255, 0, 255)), ((180, 660), (255, 0, 255)), ((180, 500), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((180, 580), (255, 0, 0)), ((180, 620), (255, 0, 0)), ((100, 660), (255, 165, 0)), ((100, 700), (255, 165, 0)), ((60, 700), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((140, 460), (255, 0, 0)), ((180, 460), (255, 0, 0)), ((220, 460), (255, 0, 0)), ((260, 460), (255, 0, 0)), ((140, 620), (255, 0, 255)), ((100, 620), (255, 0, 255)), ((100, 580), (255, 0, 255)), ((100, 540), (255, 0, 255))]), True),
            (([(140, 340), (180, 340), (180, 380), (180, 420)], [((220, 780), (0, 255, 255)), ((260, 780), (0, 255, 255)), ((140, 780), (0, 255, 255)), ((180, 780), (0, 255, 255)), ((420, 780), (255, 255, 0)), ((420, 740), (255, 255, 0)), ((300, 780), (255, 0, 255)), ((340, 780), (255, 0, 255)), ((60, 780), (0, 255, 255)), ((100, 780), (0, 255, 255)), ((100, 740), (0, 255, 255)), ((140, 740), (0, 255, 255)), ((220, 660), (255, 0, 255)), ((220, 700), (255, 0, 255)), ((180, 700), (255, 0, 255)), ((140, 700), (255, 0, 255)), ((220, 500), (255, 0, 0)), ((220, 540), (255, 0, 0)), ((220, 580), (255, 0, 0)), ((220, 620), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((180, 580), (255, 0, 0)), ((180, 620), (255, 0, 0)), ((180, 660), (255, 0, 0)), ((140, 540), (255, 0, 0)), ((140, 580), (255, 0, 0)), ((140, 620), (255, 0, 0)), ((140, 660), (255, 0, 0)), ((60, 500), (0, 255, 0)), ((100, 500), (0, 255, 0)), ((140, 500), (0, 255, 0)), ((100, 460), (0, 255, 0)), ((180, 420), (0, 255, 0)), ((220, 420), (0, 255, 0)), ((260, 420), (0, 255, 0)), ((220, 460), (0, 255, 0))]), True) ]

    tetris_window = TetrisWindow( 40, 11, 20 )
    tetrimino = Tetrimino( tetris_window )

    for ((c,l), result) in data:
        tetris_window.landed_objects = l
        count += my_assert( tetris_window.has_collision_with_landed_objects( c ), result )

    print('Test Task17: ' + str(count) + '/' + '6 test cases are passed.')

def test_task18():
    print('Test Task18 started.')
    count = 0

    tetris_window = TetrisWindow( 60, 9, 15 )

    data = [ ([(100, 740), (100, 780), (60, 780), (20, 780)], Tetrimino_L, [((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0))], [((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255))]),
             ([(220, 660), (220, 700), (220, 740), (220, 780)], Tetrimino_I, [((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((20, 740), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((60, 780), (255, 165, 0)), ((100, 780), (255, 165, 0))], [((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((20, 740), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((60, 780), (255, 165, 0)), ((100, 780), (255, 165, 0)), ((220, 660), (255, 0, 0)), ((220, 700), (255, 0, 0)), ((220, 740), (255, 0, 0)), ((220, 780), (255, 0, 0))]),
             ([(180, 300), (180, 260), (140, 260), (100, 260)], Tetrimino_J, [((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((20, 740), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((60, 780), (255, 165, 0)), ((100, 780), (255, 165, 0)), ((220, 660), (255, 0, 0)), ((220, 700), (255, 0, 0)), ((220, 740), (255, 0, 0)), ((220, 780), (255, 0, 0)), ((140, 700), (0, 255, 255)), ((140, 740), (0, 255, 255)), ((180, 740), (0, 255, 255)), ((180, 780), (0, 255, 255)), ((300, 660), (255, 255, 0)), ((300, 620), (255, 255, 0)), ((260, 620), (255, 255, 0)), ((220, 620), (255, 255, 0)), ((300, 700), (0, 255, 255)), ((340, 700), (0, 255, 255)), ((340, 660), (0, 255, 255)), ((380, 660), (0, 255, 255)), ((220, 580), (255, 255, 0)), ((180, 580), (255, 255, 0)), ((180, 620), (255, 255, 0)), ((180, 660), (255, 255, 0)), ((60, 540), (255, 0, 0)), ((100, 540), (255, 0, 0)), ((140, 540), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((260, 580), (255, 0, 0)), ((300, 580), (255, 0, 0)), ((340, 580), (255, 0, 0)), ((380, 580), (255, 0, 0)), ((380, 500), (0, 255, 255)), ((380, 540), (0, 255, 255)), ((420, 540), (0, 255, 255)), ((420, 580), (0, 255, 255)), ((220, 500), (0, 0, 255)), ((260, 500), (0, 0, 255)), ((220, 540), (0, 0, 255)), ((260, 540), (0, 0, 255)), ((300, 500), (255, 0, 255)), ((300, 460), (255, 0, 255)), ((340, 460), (255, 0, 255)), ((380, 460), (255, 0, 255)), ((20, 420), (255, 0, 255)), ((60, 420), (255, 0, 255)), ((60, 460), (255, 0, 255)), ((60, 500), (255, 0, 255)), ((140, 420), (0, 255, 255)), ((140, 460), (0, 255, 255)), ((180, 460), (0, 255, 255)), ((180, 500), (0, 255, 255)), ((380, 380), (0, 255, 255)), ((380, 420), (0, 255, 255)), ((420, 420), (0, 255, 255)), ((420, 460), (0, 255, 255)), ((100, 340), (255, 0, 255)), ((100, 380), (255, 0, 255)), ((60, 380), (255, 0, 255)), ((20, 380), (255, 0, 255)), ((220, 420), (255, 255, 0)), ((220, 380), (255, 255, 0)), ((180, 380), (255, 255, 0)), ((140, 380), (255, 255, 0)), ((340, 420), (255, 0, 255)), ((300, 420), (255, 0, 255)), ((300, 380), (255, 0, 255)), ((300, 340), (255, 0, 255)), ((220, 340), (255, 0, 255)), ((260, 340), (255, 0, 255)), ((260, 380), (255, 0, 255)), ((260, 420), (255, 0, 255)), ((140, 340), (255, 255, 0)), ((140, 300), (255, 255, 0)), ((100, 300), (255, 255, 0)), ((60, 300), (255, 255, 0)), ((420, 380), (255, 255, 0)), ((420, 340), (255, 255, 0)), ((380, 340), (255, 255, 0)), ((340, 340), (255, 255, 0)), ((220, 220), (0, 255, 0)), ((220, 260), (0, 255, 0)), ((220, 300), (0, 255, 0)), ((260, 260), (0, 255, 0))], [((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((20, 740), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((60, 780), (255, 165, 0)), ((100, 780), (255, 165, 0)), ((220, 660), (255, 0, 0)), ((220, 700), (255, 0, 0)), ((220, 740), (255, 0, 0)), ((220, 780), (255, 0, 0)), ((140, 700), (0, 255, 255)), ((140, 740), (0, 255, 255)), ((180, 740), (0, 255, 255)), ((180, 780), (0, 255, 255)), ((300, 660), (255, 255, 0)), ((300, 620), (255, 255, 0)), ((260, 620), (255, 255, 0)), ((220, 620), (255, 255, 0)), ((300, 700), (0, 255, 255)), ((340, 700), (0, 255, 255)), ((340, 660), (0, 255, 255)), ((380, 660), (0, 255, 255)), ((220, 580), (255, 255, 0)), ((180, 580), (255, 255, 0)), ((180, 620), (255, 255, 0)), ((180, 660), (255, 255, 0)), ((60, 540), (255, 0, 0)), ((100, 540), (255, 0, 0)), ((140, 540), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((260, 580), (255, 0, 0)), ((300, 580), (255, 0, 0)), ((340, 580), (255, 0, 0)), ((380, 580), (255, 0, 0)), ((380, 500), (0, 255, 255)), ((380, 540), (0, 255, 255)), ((420, 540), (0, 255, 255)), ((420, 580), (0, 255, 255)), ((220, 500), (0, 0, 255)), ((260, 500), (0, 0, 255)), ((220, 540), (0, 0, 255)), ((260, 540), (0, 0, 255)), ((300, 500), (255, 0, 255)), ((300, 460), (255, 0, 255)), ((340, 460), (255, 0, 255)), ((380, 460), (255, 0, 255)), ((20, 420), (255, 0, 255)), ((60, 420), (255, 0, 255)), ((60, 460), (255, 0, 255)), ((60, 500), (255, 0, 255)), ((140, 420), (0, 255, 255)), ((140, 460), (0, 255, 255)), ((180, 460), (0, 255, 255)), ((180, 500), (0, 255, 255)), ((380, 380), (0, 255, 255)), ((380, 420), (0, 255, 255)), ((420, 420), (0, 255, 255)), ((420, 460), (0, 255, 255)), ((100, 340), (255, 0, 255)), ((100, 380), (255, 0, 255)), ((60, 380), (255, 0, 255)), ((20, 380), (255, 0, 255)), ((220, 420), (255, 255, 0)), ((220, 380), (255, 255, 0)), ((180, 380), (255, 255, 0)), ((140, 380), (255, 255, 0)), ((340, 420), (255, 0, 255)), ((300, 420), (255, 0, 255)), ((300, 380), (255, 0, 255)), ((300, 340), (255, 0, 255)), ((220, 340), (255, 0, 255)), ((260, 340), (255, 0, 255)), ((260, 380), (255, 0, 255)), ((260, 420), (255, 0, 255)), ((140, 340), (255, 255, 0)), ((140, 300), (255, 255, 0)), ((100, 300), (255, 255, 0)), ((60, 300), (255, 255, 0)), ((420, 380), (255, 255, 0)), ((420, 340), (255, 255, 0)), ((380, 340), (255, 255, 0)), ((340, 340), (255, 255, 0)), ((220, 220), (0, 255, 0)), ((220, 260), (0, 255, 0)), ((220, 300), (0, 255, 0)), ((260, 260), (0, 255, 0)), ((180, 300), (255, 255, 0)), ((180, 260), (255, 255, 0)), ((140, 260), (255, 255, 0)), ((100, 260), (255, 255, 0))]) ]

    for coordinates, t, before, after in data:
        tetris_window.landed_objects = before
        tetrimino = t( tetris_window )
        tetrimino.coordinates = coordinates
        tetris_window.add_tetrimino_to_landed_objects( tetrimino )
        count += my_assert( tetris_window.landed_objects, after )

    print('Test Task18: ' + str(count) + '/' + '3 test cases are passed.')

def test_task19():
    print('Test Task19 started.')
    count = 0

    tetris_window = TetrisWindow( 40,11,20 )
    tetris_window.landed_objects = [((180, 780), (0, 255, 0)), ((220, 780), (0, 255, 0)), ((260, 780), (0, 255, 0)), ((220, 740), (0, 255, 0)), ((140, 740), (255, 0, 255)), ((140, 780), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((420, 740), (255, 0, 255)), ((420, 780), (255, 0, 255)), ((380, 780), (255, 0, 255)), ((340, 780), (255, 0, 255)), ((340, 700), (0, 0, 255)), ((380, 700), (0, 0, 255)), ((340, 740), (0, 0, 255)), ((380, 740), (0, 0, 255)), ((60, 700), (0, 0, 255)), ((100, 700), (0, 0, 255)), ((60, 740), (0, 0, 255)), ((100, 740), (0, 0, 255)), ((20, 660), (255, 0, 0)), ((20, 700), (255, 0, 0)), ((20, 740), (255, 0, 0)), ((20, 780), (255, 0, 0)), ((260, 700), (0, 255, 255)), ((260, 740), (0, 255, 255)), ((300, 740), (0, 255, 255)), ((300, 780), (0, 255, 255))]
    after = [((220, 780), (0, 255, 0)), ((140, 780), (255, 0, 255)), ((420, 780), (255, 0, 255)), ((340, 740), (0, 0, 255)), ((380, 740), (0, 0, 255)), ((340, 780), (0, 0, 255)), ((380, 780), (0, 0, 255)), ((60, 740), (0, 0, 255)), ((100, 740), (0, 0, 255)), ((60, 780), (0, 0, 255)), ((100, 780), (0, 0, 255)), ((20, 700), (255, 0, 0)), ((20, 740), (255, 0, 0)), ((20, 780), (255, 0, 0)), ((260, 740), (0, 255, 255)), ((260, 780), (0, 255, 255)), ((300, 780), (0, 255, 255))]
    tetris_window.update_landed_objects()

    count += my_assert( set(tetris_window.landed_objects), set(after) )

    tetris_window.landed_objects = [((220, 780), (255, 0, 255)), ((100, 780), (0, 255, 255)), ((140, 780), (0, 255, 255)), ((140, 740), (0, 255, 255)), ((180, 740), (0, 255, 255)), ((180, 780), (0, 255, 255)), ((420, 780), (255, 0, 255)), ((260, 780), (255, 0, 255)), ((260, 740), (255, 0, 255)), ((300, 740), (255, 0, 0)), ((340, 740), (255, 0, 0)), ((380, 740), (255, 0, 0)), ((420, 740), (255, 0, 0)), ((20, 740), (0, 255, 0)), ((20, 780), (0, 255, 0)), ((60, 780), (0, 255, 0)), ((20, 700), (0, 255, 255)), ((60, 740), (0, 255, 255)), ((180, 700), (0, 255, 255)), ((220, 740), (0, 255, 255)), ((220, 660), (0, 255, 255)), ((220, 700), (0, 255, 255)), ((260, 700), (0, 255, 255)), ((140, 660), (255, 165, 0)), ((140, 700), (255, 165, 0)), ((100, 700), (255, 165, 0)), ((420, 700), (255, 0, 255)), ((300, 660), (0, 255, 0)), ((300, 700), (0, 255, 0)), ((340, 700), (0, 255, 0)), ((100, 620), (255, 0, 255)), ((100, 660), (255, 0, 255)), ((60, 660), (255, 0, 255)), ((20, 660), (255, 0, 255)), ((260, 660), (255, 255, 0)), ((260, 620), (255, 255, 0)), ((220, 620), (255, 255, 0)), ((180, 620), (255, 255, 0)), ((340, 660), (0, 255, 0)), ((380, 660), (0, 255, 0)), ((420, 660), (0, 255, 0)), ((380, 620), (0, 255, 0)), ((20, 620), (255, 255, 0)), ((60, 620), (255, 255, 0)), ((60, 580), (255, 255, 0)), ((60, 540), (255, 255, 0)), ((300, 620), (255, 255, 0)), ((340, 620), (255, 255, 0)), ((340, 580), (255, 255, 0)), ((340, 540), (255, 255, 0)), ((260, 540), (0, 0, 255)), ((300, 540), (0, 0, 255)), ((260, 580), (0, 0, 255)), ((300, 580), (0, 0, 255)), ((420, 540), (0, 255, 0)), ((420, 580), (0, 255, 0)), ((420, 620), (0, 255, 0)), ((380, 580), (0, 255, 0)), ((180, 540), (255, 165, 0)), ((180, 580), (255, 165, 0)), ((140, 580), (255, 165, 0)), ((140, 620), (255, 165, 0))]
    after = [((220, 780), (255, 0, 255)), ((100, 780), (0, 255, 255)), ((140, 780), (0, 255, 255)), ((140, 740), (0, 255, 255)), ((180, 740), (0, 255, 255)), ((180, 780), (0, 255, 255)), ((420, 780), (255, 0, 255)), ((260, 780), (255, 0, 255)), ((260, 740), (255, 0, 255)), ((300, 740), (255, 0, 0)), ((340, 740), (255, 0, 0)), ((380, 740), (255, 0, 0)), ((420, 740), (255, 0, 0)), ((20, 740), (0, 255, 0)), ((20, 780), (0, 255, 0)), ((60, 780), (0, 255, 0)), ((20, 700), (0, 255, 255)), ((60, 740), (0, 255, 255)), ((180, 700), (0, 255, 255)), ((220, 740), (0, 255, 255)), ((220, 660), (0, 255, 255)), ((220, 700), (0, 255, 255)), ((260, 700), (0, 255, 255)), ((140, 660), (255, 165, 0)), ((140, 700), (255, 165, 0)), ((100, 700), (255, 165, 0)), ((420, 700), (255, 0, 255)), ((300, 660), (0, 255, 0)), ((300, 700), (0, 255, 0)), ((340, 700), (0, 255, 0)), ((100, 660), (255, 0, 255)), ((60, 660), (255, 0, 255)), ((20, 660), (255, 0, 255)), ((260, 660), (255, 255, 0)), ((340, 660), (0, 255, 0)), ((380, 660), (0, 255, 0)), ((420, 660), (0, 255, 0)), ((60, 620), (255, 255, 0)), ((60, 580), (255, 255, 0)), ((340, 620), (255, 255, 0)), ((340, 580), (255, 255, 0)), ((260, 580), (0, 0, 255)), ((300, 580), (0, 0, 255)), ((260, 620), (0, 0, 255)), ((300, 620), (0, 0, 255)), ((420, 580), (0, 255, 0)), ((420, 620), (0, 255, 0)), ((380, 620), (0, 255, 0)), ((180, 580), (255, 165, 0)), ((180, 620), (255, 165, 0)), ((140, 620), (255, 165, 0))]
    tetris_window.update_landed_objects()
    
    count += my_assert( set(tetris_window.landed_objects), set(after) )

    tetris_window.landed_objects = [((220, 740), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((260, 780), (255, 255, 0)), ((300, 780), (255, 255, 0)), ((100, 740), (255, 255, 0)), ((100, 780), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((380, 740), (0, 0, 255)), ((420, 740), (0, 0, 255)), ((380, 780), (0, 0, 255)), ((420, 780), (0, 0, 255)), ((20, 780), (255, 255, 0)), ((60, 780), (255, 255, 0)), ((60, 740), (255, 255, 0)), ((60, 700), (255, 255, 0)), ((100, 700), (255, 165, 0)), ((140, 700), (255, 165, 0)), ((140, 740), (255, 165, 0)), ((180, 740), (255, 165, 0)), ((220, 700), (255, 165, 0)), ((260, 700), (255, 165, 0)), ((260, 740), (255, 165, 0)), ((300, 740), (255, 165, 0)), ((180, 700), (255, 0, 255)), ((180, 660), (255, 0, 255)), ((220, 660), (255, 0, 255)), ((260, 660), (255, 0, 255)), ((60, 620), (255, 165, 0)), ((60, 660), (255, 165, 0)), ((20, 660), (255, 165, 0)), ((20, 700), (255, 165, 0)), ((100, 660), (255, 255, 0)), ((140, 660), (255, 255, 0)), ((140, 620), (255, 255, 0)), ((140, 580), (255, 255, 0)), ((300, 700), (0, 255, 0)), ((340, 700), (0, 255, 0)), ((380, 700), (0, 255, 0)), ((340, 740), (0, 255, 0)), ((300, 620), (255, 255, 0)), ((300, 660), (255, 255, 0)), ((340, 660), (255, 255, 0)), ((380, 660), (255, 255, 0)), ((340, 580), (0, 0, 255)), ((380, 580), (0, 0, 255)), ((340, 620), (0, 0, 255)), ((380, 620), (0, 0, 255)), ((180, 580), (0, 0, 255)), ((220, 580), (0, 0, 255)), ((180, 620), (0, 0, 255)), ((220, 620), (0, 0, 255)), ((140, 540), (255, 255, 0)), ((100, 540), (255, 255, 0)), ((100, 580), (255, 255, 0)), ((100, 620), (255, 255, 0)), ((220, 540), (255, 0, 255)), ((260, 540), (255, 0, 255)), ((260, 580), (255, 0, 255)), ((260, 620), (255, 0, 255)), ((60, 540), (255, 165, 0)), ((60, 580), (255, 165, 0)), ((20, 580), (255, 165, 0)), ((20, 620), (255, 165, 0)), ((300, 580), (255, 0, 255)), ((300, 540), (255, 0, 255)), ((340, 540), (255, 0, 255)), ((380, 540), (255, 0, 255)), ((180, 540), (255, 255, 0)), ((180, 500), (255, 255, 0)), ((140, 500), (255, 255, 0)), ((100, 500), (255, 255, 0)), ((20, 460), (0, 255, 0)), ((20, 500), (0, 255, 0)), ((20, 540), (0, 255, 0)), ((60, 500), (0, 255, 0)), ((180, 420), (0, 255, 255)), ((180, 460), (0, 255, 255)), ((220, 460), (0, 255, 255)), ((220, 500), (0, 255, 255)), ((20, 380), (0, 255, 255)), ((20, 420), (0, 255, 255)), ((60, 420), (0, 255, 255)), ((60, 460), (0, 255, 255)), ((420, 580), (255, 0, 0)), ((420, 620), (255, 0, 0)), ((420, 660), (255, 0, 0)), ((420, 700), (255, 0, 0))]
    after = [((220, 740), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((260, 780), (255, 255, 0)), ((300, 780), (255, 255, 0)), ((100, 740), (255, 255, 0)), ((100, 780), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((380, 740), (0, 0, 255)), ((420, 740), (0, 0, 255)), ((380, 780), (0, 0, 255)), ((420, 780), (0, 0, 255)), ((20, 780), (255, 255, 0)), ((60, 780), (255, 255, 0)), ((60, 740), (255, 255, 0)), ((140, 740), (255, 165, 0)), ((180, 740), (255, 165, 0)), ((260, 740), (255, 165, 0)), ((300, 740), (255, 165, 0)), ((340, 740), (0, 255, 0)), ((140, 700), (255, 255, 0)), ((100, 700), (255, 255, 0)), ((220, 700), (255, 0, 255)), ((260, 700), (255, 0, 255)), ((60, 700), (255, 165, 0)), ((300, 700), (255, 0, 255)), ((340, 700), (255, 0, 255)), ((380, 700), (255, 0, 255)), ((180, 700), (255, 255, 0)), ((180, 660), (255, 255, 0)), ((140, 660), (255, 255, 0)), ((100, 660), (255, 255, 0)), ((20, 620), (0, 255, 0)), ((20, 660), (0, 255, 0)), ((20, 700), (0, 255, 0)), ((60, 660), (0, 255, 0)), ((180, 580), (0, 255, 255)), ((180, 620), (0, 255, 255)), ((220, 620), (0, 255, 255)), ((220, 660), (0, 255, 255)), ((20, 540), (0, 255, 255)), ((20, 580), (0, 255, 255)), ((60, 580), (0, 255, 255)), ((60, 620), (0, 255, 255))]
    tetris_window.update_landed_objects()

    count += my_assert( set(tetris_window.landed_objects), set(after) )

    tetris_window = TetrisWindow( 60,7,15 )

    tetris_window.landed_objects = [((270, 870), (0, 255, 0)), ((330, 870), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((330, 810), (0, 255, 0)), ((30, 690), (255, 0, 0)), ((30, 750), (255, 0, 0)), ((30, 810), (255, 0, 0)), ((30, 870), (255, 0, 0)), ((210, 750), (0, 255, 0)), ((210, 810), (0, 255, 0)), ((210, 870), (0, 255, 0)), ((270, 810), (0, 255, 0)), ((150, 690), (255, 0, 0)), ((150, 750), (255, 0, 0)), ((150, 810), (255, 0, 0)), ((150, 870), (255, 0, 0)), ((390, 630), (255, 0, 0)), ((390, 690), (255, 0, 0)), ((390, 750), (255, 0, 0)), ((390, 810), (255, 0, 0)), ((270, 690), (0, 0, 255)), ((330, 690), (0, 0, 255)), ((270, 750), (0, 0, 255)), ((330, 750), (0, 0, 255)), ((150, 630), (255, 255, 0)), ((90, 630), (255, 255, 0)), ((90, 690), (255, 255, 0)), ((90, 750), (255, 255, 0))]
    after = [((270, 870), (0, 255, 0)), ((330, 870), (0, 255, 0)), ((390, 870), (0, 255, 0)), ((330, 810), (0, 255, 0)), ((30, 750), (255, 0, 0)), ((30, 810), (255, 0, 0)), ((30, 870), (255, 0, 0)), ((210, 810), (0, 255, 0)), ((210, 870), (0, 255, 0)), ((270, 810), (0, 255, 0)), ((150, 750), (255, 0, 0)), ((150, 810), (255, 0, 0)), ((150, 870), (255, 0, 0)), ((390, 690), (255, 0, 0)), ((390, 750), (255, 0, 0)), ((390, 810), (255, 0, 0)), ((270, 750), (0, 0, 255)), ((330, 750), (0, 0, 255)), ((150, 690), (255, 255, 0)), ((90, 690), (255, 255, 0)), ((90, 750), (255, 255, 0))]
    tetris_window.update_landed_objects()

    count += my_assert( set(tetris_window.landed_objects), set(after) )

    tetris_window.landed_objects = [((30, 870), (0, 255, 255)), ((90, 870), (0, 255, 255)), ((90, 810), (0, 255, 255)), ((150, 810), (0, 255, 255)), ((210, 870), (255, 255, 0)), ((270, 870), (255, 255, 0)), ((270, 810), (255, 255, 0)), ((210, 810), (0, 255, 255)), ((330, 810), (0, 255, 255)), ((390, 810), (0, 255, 255)), ((390, 870), (0, 255, 255)), ((150, 690), (0, 255, 255)), ((150, 750), (0, 255, 255)), ((210, 750), (0, 255, 255)), ((330, 750), (0, 255, 255)), ((330, 690), (255, 255, 0)), ((270, 690), (255, 255, 0)), ((270, 750), (255, 255, 0)), ((30, 690), (0, 0, 255)), ((90, 690), (0, 0, 255)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((30, 570), (0, 0, 255)), ((90, 570), (0, 0, 255)), ((30, 630), (0, 0, 255)), ((90, 630), (0, 0, 255)), ((270, 570), (255, 165, 0)), ((270, 630), (255, 165, 0)), ((210, 630), (255, 165, 0)), ((210, 690), (255, 165, 0)), ((390, 570), (255, 0, 0)), ((390, 630), (255, 0, 0)), ((390, 690), (255, 0, 0)), ((390, 750), (255, 0, 0))]
    after = [((30, 870), (0, 255, 255)), ((90, 870), (0, 255, 255)), ((90, 810), (0, 255, 255)), ((150, 810), (0, 255, 255)), ((210, 870), (255, 255, 0)), ((270, 870), (255, 255, 0)), ((270, 810), (255, 255, 0)), ((210, 810), (0, 255, 255)), ((330, 810), (0, 255, 255)), ((390, 810), (0, 255, 255)), ((390, 870), (0, 255, 255)), ((30, 690), (0, 0, 255)), ((90, 690), (0, 0, 255)), ((30, 750), (0, 0, 255)), ((90, 750), (0, 0, 255)), ((270, 690), (255, 165, 0)), ((270, 750), (255, 165, 0)), ((210, 750), (255, 165, 0)), ((390, 690), (255, 0, 0)), ((390, 750), (255, 0, 0))]
    tetris_window.update_landed_objects()

    count += my_assert( set(tetris_window.landed_objects), set(after) )

    print('Test Task19: ' + str(count) + '/' + '5 test cases are passed.')

def test_task20():
    print('Test Task20 started.')
    count = 0

    data = [(([((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255)), ((220, 740), (255, 0, 255)), ((180, 740), (255, 0, 255)), ((180, 700), (255, 0, 255)), ((180, 660), (255, 0, 255))], [(180, 380), (180, 420), (180, 460), (180, 500)]), False), (([((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255)), ((220, 740), (255, 0, 255)), ((180, 740), (255, 0, 255)), ((180, 700), (255, 0, 255)), ((180, 660), (255, 0, 255)), ((180, 500), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((180, 580), (255, 0, 0)), ((180, 620), (255, 0, 0)), ((100, 660), (255, 165, 0)), ((100, 700), (255, 165, 0)), ((60, 700), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((140, 460), (255, 0, 0)), ((180, 460), (255, 0, 0)), ((220, 460), (255, 0, 0)), ((260, 460), (255, 0, 0)), ((140, 620), (255, 0, 255)), ((100, 620), (255, 0, 255)), ((100, 580), (255, 0, 255)), ((100, 540), (255, 0, 255)), ((260, 620), (255, 255, 0)), ((220, 620), (255, 255, 0)), ((220, 660), (255, 255, 0)), ((220, 700), (255, 255, 0)), ((300, 660), (0, 0, 255)), ((340, 660), (0, 0, 255)), ((300, 700), (0, 0, 255)), ((340, 700), (0, 0, 255)), ((300, 500), (255, 165, 0)), ((300, 540), (255, 165, 0)), ((260, 540), (255, 165, 0)), ((260, 580), (255, 165, 0)), ((100, 500), (255, 0, 255)), ((60, 500), (255, 0, 255)), ((60, 460), (255, 0, 255)), ((60, 420), (255, 0, 255)), ((340, 580), (0, 255, 255)), ((340, 620), (0, 255, 255)), ((380, 620), (0, 255, 255)), ((380, 660), (0, 255, 255)), ((380, 500), (255, 255, 0)), ((380, 460), (255, 255, 0)), ((340, 460), (255, 255, 0)), ((300, 460), (255, 255, 0)), ((100, 380), (0, 0, 255)), ((140, 380), (0, 0, 255)), ((100, 420), (0, 0, 255)), ((140, 420), (0, 0, 255)), ((180, 300), (255, 0, 0)), ((180, 340), (255, 0, 0)), ((180, 380), (255, 0, 0)), ((180, 420), (255, 0, 0)), ((260, 340), (255, 165, 0)), ((260, 380), (255, 165, 0)), ((220, 380), (255, 165, 0)), ((220, 420), (255, 165, 0)), ((140, 180), (0, 255, 255)), ((140, 220), (0, 255, 255)), ((180, 220), (0, 255, 255)), ((180, 260), (0, 255, 255))], [(300, 180), (300, 220), (340, 220), (380, 220)]), False), (([((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((20, 740), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((60, 780), (255, 165, 0)), ((100, 780), (255, 165, 0)), ((220, 660), (255, 0, 0)), ((220, 700), (255, 0, 0)), ((220, 740), (255, 0, 0)), ((220, 780), (255, 0, 0)), ((140, 700), (0, 255, 255)), ((140, 740), (0, 255, 255)), ((180, 740), (0, 255, 255)), ((180, 780), (0, 255, 255)), ((300, 660), (255, 255, 0)), ((300, 620), (255, 255, 0)), ((260, 620), (255, 255, 0)), ((220, 620), (255, 255, 0)), ((300, 700), (0, 255, 255)), ((340, 700), (0, 255, 255)), ((340, 660), (0, 255, 255)), ((380, 660), (0, 255, 255)), ((220, 580), (255, 255, 0)), ((180, 580), (255, 255, 0)), ((180, 620), (255, 255, 0)), ((180, 660), (255, 255, 0))], [(100, 220), (140, 220), (180, 220), (220, 220)]), False), (([((380, 700), (0, 255, 255)), ((380, 740), (0, 255, 255)), ((420, 740), (0, 255, 255)), ((420, 780), (0, 255, 255)), ((260, 780), (0, 255, 0)), ((300, 780), (0, 255, 0)), ((340, 780), (0, 255, 0)), ((300, 740), (0, 255, 0)), ((140, 740), (255, 255, 0)), ((140, 780), (255, 255, 0)), ((180, 780), (255, 255, 0)), ((220, 780), (255, 255, 0)), ((100, 740), (255, 0, 255)), ((100, 780), (255, 0, 255)), ((60, 780), (255, 0, 255)), ((20, 780), (255, 0, 255)), ((220, 740), (255, 0, 255)), ((180, 740), (255, 0, 255)), ((180, 700), (255, 0, 255)), ((180, 660), (255, 0, 255)), ((180, 500), (255, 0, 0)), ((180, 540), (255, 0, 0)), ((180, 580), (255, 0, 0)), ((180, 620), (255, 0, 0)), ((100, 660), (255, 165, 0)), ((100, 700), (255, 165, 0)), ((60, 700), (255, 165, 0)), ((60, 740), (255, 165, 0)), ((140, 460), (255, 0, 0)), ((180, 460), (255, 0, 0)), ((220, 460), (255, 0, 0)), ((260, 460), (255, 0, 0)), ((140, 620), (255, 0, 255)), ((100, 620), (255, 0, 255)), ((100, 580), (255, 0, 255)), ((100, 540), (255, 0, 255)), ((260, 620), (255, 255, 0)), ((220, 620), (255, 255, 0)), ((220, 660), (255, 255, 0)), ((220, 700), (255, 255, 0)), ((300, 660), (0, 0, 255)), ((340, 660), (0, 0, 255)), ((300, 700), (0, 0, 255)), ((340, 700), (0, 0, 255)), ((300, 500), (255, 165, 0)), ((300, 540), (255, 165, 0)), ((260, 540), (255, 165, 0)), ((260, 580), (255, 165, 0)), ((100, 500), (255, 0, 255)), ((60, 500), (255, 0, 255)), ((60, 460), (255, 0, 255)), ((60, 420), (255, 0, 255)), ((340, 580), (0, 255, 255)), ((340, 620), (0, 255, 255)), ((380, 620), (0, 255, 255)), ((380, 660), (0, 255, 255)), ((380, 500), (255, 255, 0)), ((380, 460), (255, 255, 0)), ((340, 460), (255, 255, 0)), ((300, 460), (255, 255, 0)), ((100, 380), (0, 0, 255)), ((140, 380), (0, 0, 255)), ((100, 420), (0, 0, 255)), ((140, 420), (0, 0, 255)), ((180, 300), (255, 0, 0)), ((180, 340), (255, 0, 0)), ((180, 380), (255, 0, 0)), ((180, 420), (255, 0, 0)), ((260, 340), (255, 165, 0)), ((260, 380), (255, 165, 0)), ((220, 380), (255, 165, 0)), ((220, 420), (255, 165, 0)), ((140, 180), (0, 255, 255)), ((140, 220), (0, 255, 255)), ((180, 220), (0, 255, 255)), ((180, 260), (0, 255, 255)), ((340, 340), (255, 255, 0)), ((340, 300), (255, 255, 0)), ((300, 300), (255, 255, 0)), ((260, 300), (255, 255, 0)), ((340, 260), (0, 255, 255)), ((380, 260), (0, 255, 255)), ((380, 220), (0, 255, 255)), ((420, 220), (0, 255, 255)), ((220, 220), (255, 0, 0)), ((220, 260), (255, 0, 0)), ((220, 300), (255, 0, 0)), ((220, 340), (255, 0, 0)), ((140, 20), (255, 0, 0)), ((140, 60), (255, 0, 0)), ((140, 100), (255, 0, 0)), ((140, 140), (255, 0, 0)), ((340, 140), (0, 255, 0)), ((340, 180), (0, 255, 0)), ((340, 220), (0, 255, 0)), ((300, 180), (0, 255, 0)), ((220, 100), (255, 165, 0)), ((260, 100), (255, 165, 0)), ((260, 140), (255, 165, 0)), ((300, 140), (255, 165, 0)), ((220, 20), (255, 165, 0)), ((220, 60), (255, 165, 0)), ((180, 60), (255, 165, 0)), ((180, 100), (255, 165, 0))], [(180, 20), (220, 20), (220, 60), (220, 100)]), True), (([((300, 780), (0, 255, 255)), ((340, 780), (0, 255, 255)), ((220, 780), (0, 0, 255)), ((260, 780), (0, 0, 255)), ((140, 780), (255, 0, 0)), ((420, 780), (255, 0, 0)), ((180, 780), (255, 0, 255)), ((60, 780), (0, 255, 255)), ((100, 780), (0, 255, 255)), ((180, 740), (0, 255, 0)), ((220, 740), (0, 255, 0)), ((260, 740), (0, 255, 0)), ((20, 780), (255, 0, 0)), ((380, 700), (255, 165, 0)), ((380, 740), (255, 165, 0)), ((340, 740), (255, 165, 0)), ((20, 700), (0, 0, 255)), ((60, 700), (0, 0, 255)), ((20, 740), (0, 0, 255)), ((60, 740), (0, 0, 255)), ((340, 700), (255, 165, 0)), ((300, 700), (255, 165, 0)), ((300, 740), (255, 165, 0)), ((180, 700), (255, 165, 0)), ((140, 700), (255, 165, 0)), ((140, 740), (255, 165, 0)), ((300, 660), (255, 165, 0)), ((260, 700), (255, 165, 0)), ((100, 700), (255, 255, 0)), ((100, 740), (255, 255, 0)), ((260, 620), (255, 165, 0)), ((260, 660), (255, 165, 0)), ((220, 660), (255, 165, 0)), ((140, 620), (0, 0, 255)), ((180, 620), (0, 0, 255)), ((140, 660), (0, 0, 255)), ((180, 660), (0, 0, 255)), ((60, 660), (255, 255, 0)), ((60, 620), (255, 255, 0)), ((380, 660), (0, 0, 255)), ((420, 660), (0, 0, 255)), ((140, 540), (0, 0, 255)), ((180, 540), (0, 0, 255)), ((140, 580), (0, 0, 255)), ((180, 580), (0, 0, 255)), ((60, 580), (255, 255, 0)), ((20, 580), (255, 255, 0)), ((20, 620), (255, 255, 0)), ((20, 660), (255, 255, 0)), ((20, 500), (0, 0, 255)), ((60, 500), (0, 0, 255)), ((20, 540), (0, 0, 255)), ((60, 540), (0, 0, 255)), ((380, 580), (0, 0, 255)), ((420, 580), (0, 0, 255)), ((380, 620), (0, 0, 255)), ((420, 620), (0, 0, 255)), ((260, 580), (255, 165, 0)), ((300, 580), (255, 165, 0)), ((300, 620), (255, 165, 0)), ((340, 620), (255, 165, 0)), ((300, 500), (0, 255, 255)), ((300, 540), (0, 255, 255)), ((340, 540), (0, 255, 255)), ((340, 580), (0, 255, 255)), ((420, 540), (255, 0, 255)), ((380, 540), (255, 0, 255)), ((380, 500), (255, 0, 255)), ((380, 460), (255, 0, 255)), ((300, 420), (0, 255, 255)), ((300, 460), (0, 255, 255)), ((340, 460), (0, 255, 255)), ((340, 500), (0, 255, 255)), ((180, 500), (255, 0, 255)), ((140, 500), (255, 0, 255)), ((140, 460), (255, 0, 255)), ((140, 420), (255, 0, 255)), ((260, 500), (255, 165, 0)), ((260, 540), (255, 165, 0)), ((220, 540), (255, 165, 0)), ((220, 580), (255, 165, 0)), ((260, 420), (255, 165, 0)), ((260, 460), (255, 165, 0)), ((220, 460), (255, 165, 0)), ((220, 500), (255, 165, 0)), ((180, 420), (0, 255, 255)), ((220, 420), (0, 255, 255)), ((220, 380), (0, 255, 255)), ((260, 380), (0, 255, 255)), ((420, 380), (255, 0, 0)), ((420, 420), (255, 0, 0)), ((420, 460), (255, 0, 0)), ((420, 500), (255, 0, 0)), ((20, 420), (0, 0, 255)), ((60, 420), (0, 0, 255)), ((20, 460), (0, 0, 255)), ((60, 460), (0, 0, 255)), ((300, 340), (0, 255, 255)), ((300, 380), (0, 255, 255)), ((340, 380), (0, 255, 255)), ((340, 420), (0, 255, 255)), ((180, 300), (0, 255, 0)), ((180, 340), (0, 255, 0)), ((180, 380), (0, 255, 0)), ((220, 340), (0, 255, 0)), ((220, 180), (255, 165, 0)), ((220, 220), (255, 165, 0)), ((180, 220), (255, 165, 0)), ((180, 260), (255, 165, 0)), ((420, 340), (255, 255, 0)), ((380, 340), (255, 255, 0)), ((380, 380), (255, 255, 0)), ((380, 420), (255, 255, 0)), ((180, 60), (255, 0, 255)), ((220, 60), (255, 0, 255)), ((220, 100), (255, 0, 255)), ((220, 140), (255, 0, 255))], [(220, 20), (220, 60), (180, 60), (180, 100)]), True)]

    tetris_window = TetrisWindow( 60, 9, 15 )
    tetrimino = Tetrimino( tetris_window )
    
    for ((landed_objects, coordinates),result) in data:
        tetris_window.landed_objects = landed_objects
        tetrimino.coordinates = coordinates
        count += my_assert( tetris_window.is_game_over( tetrimino ), result )

    print('Test Task20: ' + str(count) + '/' + '5 test cases are passed.')

def test_task21():
    print('Test Task21: You should test Task21 visually by running the game after you finish all tasks.')

def test_task22():
    print('Test Task22: You should test Task22 visually by running the game after you finish all tasks.')

def test_task23():
    print('Make sure you finished Task23.')


def test():
    test_task0()
    test_task1()
    test_task2()
    test_task3()
    test_task4()
    test_task5()
    test_task6()
    test_task7()
    test_task8()
    test_task9()
    test_task10()
    test_task11()
    test_task12()
    test_task13()
    test_task14()
    test_task15()
    test_task16()
    test_task17()
    test_task18()
    test_task19()
    test_task20()
    test_task21()
    test_task22()
    test_task23()

test()
